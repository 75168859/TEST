#####	函数 			#########
格式
	修饰符    返回值类型  函数名(参数类型     形式参数1,参数类型   形式参数2){
		执行语句;
		return 返回值;
	}
特殊情况：
	功能没有具体的返回值，这是 return的后面直接用分号结束。
	返回值类型怎么体现呢？因为没有具体的值，所以不可以写具体的数据类型。
	在java中只能用一个关键字来表示这种情况，关键字是：void
总结：没有具体返回值时，返回值类型用void表示。
注意：如果返回值类型是void,那么函数中的return语句可以省略不写
	函数中只能调用函数，不可以在函数内部定义函数
	定义函数时，函数的结果应该返回给调用者，交由调用者处理
public static void test(){return;}
##################################

####	函数的重载		#####
概念：在同一个类中，允许存在一个以上的同名函数，只要他们的参数个数或者参数类型不同即可
特点：与返回值类型无关，只看参数列表
好处：方便于阅读，优化了程序设计
注：java是严谨性语言，如果函数出现调用的不确定性，会编译失败
示例：
int add(int x,int y){return x+y;}  //返回两个整数
int add(int x,int y,int z){return x+y+z;}//返回三个整数的和
double add(double x,double y){return x+y;}//返回两个小数的和

####	内存加载过程：main栈底 先进后出		###########
########################################################################################
####   数组        ##########
概念
	同一种类型数据的集合。其实数据就是一个容器
好处：
	可以自动给数组中的元素从0开始编号，方便操作这些元素
格式1
	元素类型[] 数组名称 = new 元素类型[元素个数或数组长度]
	int[] arr = new int[10];    //需要容器但是不明确容器中的具体数据
格式2
	元素类型[] 数组名称 = new 元素类型[]{元素,元素,...}
	int[] arr = new int[]{34,5,56,33};  //需要容器，且已知容器中的具体数据
	int[] arr = {23,23,44,33,66,90};
	
内存的划分：
1.寄存器
2.本地方法区
3，方法区
4，栈内存
          存储的都是局部变量，凡是在方法内定义的变量都是局部变量
          而且变量所属的作用域一旦结束，该变量就自动释放（生命周期短，更新速度快）
          {//局部代码块，限定局部变量的生命周期
          	int age = 3;
          }
5，堆内存
	存储的是数组和对象（其实数组就是对象），凡是new建立的都在堆中
	特点：
	int[] arr = new int[3];    //  [I@ae3865e    [I 代表实体类型：数组型实体，int类型的
	int[] arr在栈内存中,保存的是对内存的地址， arr 称作引用数据类型
	new int[3] 在堆内存中
	堆中存的都是实体，实体中封装的数据
	1.每一个实体都有首地址值
	2.堆内存中每一个变量都有默认初始化值，
	根据类型的不同而不同，整数是0，小数是0.0或0.0f,boolean false,char '\u0000'. \u 代表unicode码
	3.垃圾回收机制
	
数组角标越界异常是在运行时抛出的，编译时能通过编译
#########################
